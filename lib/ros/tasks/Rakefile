require 'ros'
# require 'ros/exec'
require 'pry'

namespace :install do
  desc 'Copy templates'
  task :templates do
    Ros.install_templates
  end
end

%i(generate destroy).each do |action|
  namespace action do
    Settings.components.keys.each do |item1|
      desc "#{action} #{item1}"
      task item1 do |task, args|
        Ros.from_rake(task.name, args)
      end
      namespace item1 do
        Settings.components[item1].components.keys.each do |item2|
          desc "#{action} #{item2}"
          task item2 do |task, args|
            Ros.from_rake(task.name, args)
          end
          namespace item2 do
            ar = Settings.components[item1].components[item2]&.components&.keys
            Settings.components[item1].components[item2].components.keys.each do |item3|
              desc "#{action} #{item3}"
              task item3 do |task, args|
                # kubernetes and instance are components but cluster is the class
                task_name = task.name.gsub('kubernetes', 'cluster').gsub('instance', 'cluster')
                Ros.from_rake(task_name, args)
              end
            end if ar
          end
        end
      end
    end
  end
end

namespace :bump do
  task :env do
    require 'bump'
    Bump.replace_in_default = Dir['services/**/*.gemspec']
  end

  desc 'Display current version'
  task current: :env do; STDOUT.puts Bump::Bump.current end

  desc 'Bump MAJOR level for all gems'
  task major: :env do; Bump::Bump.run('major') end

  desc 'Bump MINOR level for all gems'
  task minor: :env do; Bump::Bump.run('minor') end

  desc 'Bump PATCH level for all gems'
  task patch: :env do; Bump::Bump.run('patch') end
end

namespace :ros do
  namespace :iam do
    namespace :credentials do
      # TODO: Is this necessary? OR could be implemented as a CLI command?
      desc 'Link IAM credentials for the current deployment'
      task :link do |task|
        # Ros.exec_from_rake(task.name, args.extras.flatten)
        # Ros::Exec.new.execute(task.name, [:iam])
        Ros.exec_from_rake(task.name, [:iam])
      end
    end
  end

  namespace :db do
    desc 'Clean a database (removes all tenants)'
    task :clean, %i(service) do |task, args|
      Ros.exec_from_rake(task.name, args[:service])
    end

    namespace :clean do
      desc 'Clean a database and seed it'
      task :seed, %i(service) do |task, args|
        Ros.exec_from_rake(task.name, args[:service])
      end

      desc 'Reset a database (drop, create and run migrations)'
      task :reset, %i(service) do |task, args|
        Ros.exec_from_rake(task.name, args[:service])
      end
    end

    namespace :reset do
      desc 'Reset a database and seed it'
      task :seed, %i(service) do |task, args|
        Ros.exec_from_rake(task.name, args[:service])
      end
    end
  end

  namespace :avro do
    desc 'Register Avro schemas'
    task :register, %i(service) do |task, args|
      Ros.exec_from_rake(task.name, args[:service])
    end
  end
end

namespace :db do
  namespace :migrate do
    desc 'Display status of migrations'
    task :status, %i(service) do |task, args|
      Ros.exec_from_rake(task.name, args[:service])
    end
  end
end
