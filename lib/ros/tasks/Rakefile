require 'ros'
require 'ros/exec'
require 'pry'

namespace :preflight do
  desc 'Check that platform requirements are present'
  task :check do
    Ros.preflight_check
  end

  desc 'Auto fix any missing platform requirements'
  task :fix do
    Ros.preflight_check(fix: true)
  end
end

namespace :deployment do
  %i(configure provision rollback).each do |action|
    desc "#{action.capitalize} #{Ros.env} deployment (#{Settings.meta.components.provider.split('/').last})"
    task action do |task, args|
      %i(infra platform service).each do |type|
        Ros.ops_action(type, action)
      end
    end

    namespace action do
      %i(infra platform service).each do |namespace|
        # desc "#{action.capitalize} #{namespace}"
        task namespace do |task, args|
          ns, action, type = task.name.split(':')
          Ros.ops_action(type, action)
        end
      end
    end
  end
end

namespace :bump do
  task :env do
    require 'bump'
    Bump.replace_in_default = Dir['services/**/*.gemspec']
  end

  desc 'Display current version'
  task current: :env do; STDOUT.puts Bump::Bump.current end

  desc 'Bump MAJOR level for all gems'
  task major: :env do; Bump::Bump.run('major') end

  desc 'Bump MINOR level for all gems'
  task minor: :env do; Bump::Bump.run('minor') end

  desc 'Bump PATCH level for all gems'
  task patch: :env do; Bump::Bump.run('patch') end
end

namespace :ros do
  namespace :iam do
    namespace :credentials do
      desc 'Display IAM credentials for the current deployment'
      task :show do |task|
        Ros::Exec.new.execute(task.name, [:iam])
      end
      desc 'Link IAM credentials for the current deployment'
      task :link do |task|
        Ros::Exec.new.execute(task.name, [:iam])
      end
    end
  end

  namespace :apidoc do
    desc 'Generate, convert and publish'
    task :all do |task|
      Ros::Exec.new.execute(task.name)
    end

    desc 'Create OpenAPI V 3.0 docuementation'
    task :generate do |task|
      Ros::Exec.new.execute(task.name)
    end

    desc 'Convert OpenAPI V 3.0 docuementation to Postman'
    task :convert do |task|
      Ros::Exec.new.execute(task.name)
    end

    desc 'Publish docs to Postman'
    task :publish do |task|
      Ros::Exec.new.execute(task.name)
    end
  end

  namespace :erd do
    desc 'Generate ERD'
    task :generate  do |task|
      Ros::Exec.new.execute(task.name, ARGV)
    end
  end

  namespace :db do
    desc 'Clean a database (removes all tenants)'
    task :clean do |task|
      Ros::Exec.new.execute(task.name, ARGV)
    end

    namespace :clean do
      desc 'Clean a database and seed it'
      task :seed do |task|
        Ros::Exec.new.execute(task.name, ARGV)
      end

      desc 'Reset a database (drop, create and run migrations)'
      task :reset do |task|
        Ros::Exec.new.execute(task.name, ARGV)
      end
    end

    namespace :reset do
      desc 'Reset a database and seed it'
      task :seed do |task|
        Ros::Exec.new.execute(task.name, ARGV)
      end
    end
  end
end

namespace :db do
  namespace :migrate do
    desc 'db migraiton status'
    task :status do |task|
      Ros::Exec.new.execute(task.name, ARGV)
    end
  end
end
