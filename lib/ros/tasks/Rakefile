require 'ros'
require 'ros/exec'

namespace :compose do
  task :env do
    require 'ros/compose'
    Ros::Compose.new.write_envs
  end

  desc 'Setup services - Create, migrate and seed all service databases'
  task setup: :env do |task|
    ARGV.unshift('-d').unshift('-r')
    Ros::Exec.new.execute('db:reset:seed')
  end

  desc 'Start all services (in background)'
  task up: :env do |task|
    system("docker-compose #{task.name} -d")
  end

  desc 'Build images for all services'
  task build: :env do |task|
    system('docker-compose build')
  end
end

namespace :bump do
  task :env do
    require 'bump'
    Bump.replace_in_default = Dir['services/**/*.gemspec']
  end

  desc 'Display current version'
  task current: :env do; STDOUT.puts Bump::Bump.current end

  desc 'Bump MAJOR level for all gems'
  task major: :env do; Bump::Bump.run('major') end

  desc 'Bump MINOR level for all gems'
  task minor: :env do; Bump::Bump.run('minor') end

  desc 'Bump PATCH level for all gems'
  task patch: :env do; Bump::Bump.run('patch') end
end

namespace :apidoc do
  desc 'Generate, convert and publish'
  task :all do |task|
    Ros::Exec.new.execute(task.name)
  end

  desc 'Create OpenAPI V 3.0 docuementation'
  task :generate do |task|
    Ros::Exec.new.execute(task.name)
  end

  desc 'Convert OpenAPI V 3.0 docuementation to Postman'
  task :convert do |task|
    Ros::Exec.new.execute(task.name)
  end

  desc 'Publish docs to Postman'
  task :publish do |task|
    Ros::Exec.new.execute(task.name)
  end
end

namespace :db do
  desc 'Clean a database (removes all tenants)'
  task :clean do |task|
    Ros::Exec.new.execute(task.name)
  end

  namespace :clean do
    desc 'Clean a database and seed it'
    task :seed do |task|
      Ros::Exec.new.execute(task.name)
    end

    desc 'Reset a database (drop, create and run migrations)'
    task :reset do |task|
      Ros::Exec.new.execute(task.name)
    end
  end

  namespace :reset do
    desc 'Reset a database and seed it'
    task :seed do |task|
      Ros::Exec.new.execute(task.name)
    end
  end
end
