require 'ros'
require 'ros/exec'
require 'pry'

namespace :preflight do
  desc 'Check that platform requirements are present'
  task :check do
    Ros.preflight_check
  end

  desc 'Auto fix any missing platform requirements'
  task :fix do
    Ros.preflight_check(fix: true)
  end
end

namespace :ops do
  namespace :be do
    namespace :application do
      %i(services platform).each do |thing|
        task thing do |task, args|
          Ros.send(task.name.split(':').first, { behavior: :invoke }, *(task.name.split(':')[1..-1]))
        end
        desc "#{thing} rollback"
        task "#{thing}:rollback" do |task, args|
          Ros.send(task.name.split(':').first, { behavior: :revoke }, *(task.name.split(':')[1..-2]))
        end
      end
    end
  end
end

namespace :generate do
  namespace :be do
    namespace :cluster do
      %i(infra services).each do |thing|
        desc "#{thing}"
        task thing do |task, args|
          Ros.send(task.name.split(':').first, { behavior: :invoke }, *(task.name.split(':')[1..-1]))
        end
        desc "#{thing} rollback"
        task "#{thing}:rollback" do |task, args|
          Ros.send(task.name.split(':').first, { behavior: :revoke }, *(task.name.split(':')[1..-2]))
        end
      end
    end
    namespace :application do
      %i(platform services).each do |thing|
        desc "#{thing}"
        task thing do |task, args|
          Ros.send(task.name.split(':').first, { behavior: :invoke }, *(task.name.split(':')[1..-1]))
        end
        desc "#{thing} rollback"
        task "#{thing}:rollback" do |task, args|
          Ros.send(task.name.split(':').first, { behavior: :revoke }, *(task.name.split(':')[1..-2]))
        end
      end
    end
  end
end
# ros be:app:prepare (infra, services, platform)
# ros be:app:deploy
# ros be:app:deploy:status
# ros be:app:rollback

namespace :platform do
  namespace :infra do
    desc 'Create the platform infrasturcture'
    task :create do |task, args|
    end
    desc 'Migrate the platform infrasturcture'
    task :migrate do |task, args|
    end
    desc 'Drop the platform infrasturcture'
    task :drop do |task, args|
    end
  end

  desc 'Deploys the platform into the target environment'
  task :create do |task, args|
    Ros.ops_action(:core, :setup)
    Ros.ops_action(:platform, :setup)
    # Ros.ops_action(:core, :apply)
  end

  desc 'Deploys (or reploys) the platform services in the target environment'
  # brings down then up the platform services; reloads nginx if necessary
  task :migrate do |task, args|
    Ros.ops_action(:platform, :setup)
    Ros.ops_action(:core, :setup)
    Ros.ops_action(:platform, :apply)
  end

  desc 'platform status'
  # brings down then up the platform services; reloads nginx if necessary
  task :status do |task, args|
    options = Config::Options.new
      infra_type = Settings.infra.config.type
      type = :platform
      require "ros/ops/#{infra_type}"
      context = Object.const_get("Ros::Ops::#{infra_type.capitalize}::#{type.to_s.capitalize}").new(options)
      context.ps
  end

  desc 'Deploys (or reploys) the platform services in the target environment'
  # brings down then up the platform services; reloads nginx if necessary
  task :drop do |task, args|
    Ros.ops_action(:platform, :rollback)
    Ros.ops_action(:core, :rollback)
  end
end

=begin
namespace :deploy do
  %i(setup apply rollback).each do |action|
    desc "#{action.capitalize} #{Ros.env} deployment (#{Settings.infra.config.type})"
    task action do |task, args|
      %i(infra core platform).each do |type|
        Ros.ops_action(type, action)
      end
    end

    namespace action do
      %i(infra core platform).each do |namespace|
        # desc "#{action.capitalize} #{namespace}"
        task namespace do |task, args|
          ns, action, type = task.name.split(':')
          Ros.ops_action(type, action)
        end
      end
    end
  end
end
=end

namespace :bump do
  task :env do
    require 'bump'
    Bump.replace_in_default = Dir['services/**/*.gemspec']
  end

  desc 'Display current version'
  task current: :env do; STDOUT.puts Bump::Bump.current end

  desc 'Bump MAJOR level for all gems'
  task major: :env do; Bump::Bump.run('major') end

  desc 'Bump MINOR level for all gems'
  task minor: :env do; Bump::Bump.run('minor') end

  desc 'Bump PATCH level for all gems'
  task patch: :env do; Bump::Bump.run('patch') end
end

namespace :ros do
  namespace :iam do
    namespace :credentials do
      desc 'Display IAM credentials for the current deployment'
      task :show do |task|
        Ros::Exec.new.execute(task.name, [:iam])
      end
      desc 'Link IAM credentials for the current deployment'
      task :link do |task|
        Ros::Exec.new.execute(task.name, [:iam])
      end
    end
  end

  namespace :apidoc do
    desc 'Generate, convert and publish'
    task :all do |task|
      Ros::Exec.new.execute(task.name)
    end

    desc 'Create OpenAPI V 3.0 docuementation'
    task :generate do |task|
      Ros::Exec.new.execute(task.name)
    end

    desc 'Convert OpenAPI V 3.0 docuementation to Postman'
    task :convert do |task|
      Ros::Exec.new.execute(task.name)
    end

    desc 'Publish docs to Postman'
    task :publish do |task|
      Ros::Exec.new.execute(task.name)
    end
  end

  namespace :erd do
    desc 'Generate ERD'
    task :generate, %i(service)  do |task, args|
      Ros::Exec.new.execute(task.name, args[:service])
    end
  end

  namespace :db do
    desc 'Clean a database (removes all tenants)'
    task :clean, %i(service) do |task, args|
      Ros::Exec.new.execute(task.name, args[:service])
    end

    namespace :clean do
      desc 'Clean a database and seed it'
      task :seed, %i(service) do |task, args|
        Ros::Exec.new.execute(task.name, args[:service])
      end

      desc 'Reset a database (drop, create and run migrations)'
      task :reset, %i(service) do |task, args|
        Ros::Exec.new.execute(task.name, args[:service])
      end
    end

    namespace :reset do
      desc 'Reset a database and seed it'
      task :seed, %i(service) do |task, args|
        Ros::Exec.new.execute(task.name, args[:service])
      end
    end
  end
end

namespace :db do
  namespace :migrate do
    desc 'Display status of migrations'
    task :status, %i(service) do |task, args|
      Ros::Exec.new.execute(task.name, args[:service])
    end
  end
end
