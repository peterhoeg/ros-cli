require 'ros'
require 'ros/exec'

# Ros.env = the env file to load which includes the infra, platform, services
# branch name or 'default' = the namnespace (k8s) or nginx port number (compose) for the platform
# deployment/kubernetes/infra.rb
namespace :ops do
  %i(configure provision rollback).each do |action|
    desc "#{action.capitalize} all"
    task action do |task, args|
      require "ros/ops/#{Settings.infra.type}"
      %i(infra platform service).each do |type|
        obj = Object.const_get("Ros::Ops::#{Settings.infra.type.capitalize}::#{type.to_s.capitalize}").new
        obj.send(action)
      end
    end

    namespace action do
      %i(infra platform service).each do |namespace|
        desc "#{action.capitalize} #{namespace}"
        task namespace do |task, args|
          ns, action, type = task.name.split(':')
          require "ros/ops/#{Settings.infra.type}"
          obj = Object.const_get("Ros::Ops::#{Settings.infra.type.capitalize}::#{type.to_s.capitalize}").new
          obj.send(action)
        end
      end
    end
  end
end

namespace :compose do
  # desc 'Setup services - Create, migrate and seed all service databases'
  # task setup: :env do |task|
  #   ARGV.unshift('-d').unshift('-r')
  #   Ros::Exec.new.execute('db:reset:seed')
  # end

  # desc 'Start all services (in background)'
  # task deploy do |task|
  #   system("docker-compose #{task.name} -d")
  # end

  # desc 'Build images for all services'
  # task build: :env do |task|
  #   system('docker-compose build')
  # end

  # namespace :build do
  #   Settings.compose.environments.each do |env|
  #     desc "Build #{env.name} images"
  #     task env.name do |task|
  #       config = Settings.compose.environments.collect.select{ |d| d.name.eql?(env.name) }.first
  #       Ros::Compose.new(config).build
  #     end
  #   end
  # end

  # namespace :deploy do
  #   Settings.compose.profiles.each do |profile|
  #     Settings.compose.environments.each do |env|
  #       desc profile.description
  #       task "#{profile.name}:#{env.name}" do |task|
  #         profile_config = Settings.compose.profiles.collect.select{ |d| d.name.eql?(profile.name) }.first
  #         env_config = Settings.compose.environments.collect.select{ |d| d.name.eql?(env.name) }.first
  #         Ros::Compose.new({ profile: profile_config, env: env_config }).deploy
  #       end
  #     end
  #   end
  # end
end

namespace :bump do
  task :env do
    require 'bump'
    Bump.replace_in_default = Dir['services/**/*.gemspec']
  end

  desc 'Display current version'
  task current: :env do; STDOUT.puts Bump::Bump.current end

  desc 'Bump MAJOR level for all gems'
  task major: :env do; Bump::Bump.run('major') end

  desc 'Bump MINOR level for all gems'
  task minor: :env do; Bump::Bump.run('minor') end

  desc 'Bump PATCH level for all gems'
  task patch: :env do; Bump::Bump.run('patch') end
end

namespace :apidoc do
  desc 'Generate, convert and publish'
  task :all do |task|
    Ros::Exec.new.execute(task.name)
  end

  desc 'Create OpenAPI V 3.0 docuementation'
  task :generate do |task|
    Ros::Exec.new.execute(task.name)
  end

  desc 'Convert OpenAPI V 3.0 docuementation to Postman'
  task :convert do |task|
    Ros::Exec.new.execute(task.name)
  end

  desc 'Publish docs to Postman'
  task :publish do |task|
    Ros::Exec.new.execute(task.name)
  end
end

namespace :erd do
  desc 'Generate ERD'
  task :generate  do |task|
    Ros::Exec.new.execute(task.name)
  end
end

namespace :db do
  desc 'Clean a database (removes all tenants)'
  task :clean do |task|
    Ros::Exec.new.execute(task.name)
  end

  namespace :clean do
    desc 'Clean a database and seed it'
    task :seed do |task|
      Ros::Exec.new.execute(task.name)
    end

    desc 'Reset a database (drop, create and run migrations)'
    task :reset do |task|
      Ros::Exec.new.execute(task.name)
    end
  end

  namespace :reset do
    desc 'Reset a database and seed it'
    task :seed do |task|
      Ros::Exec.new.execute(task.name)
    end
  end
end
